for server.py

from flask import Flask, request, jsonify
import socket
import math
import time
import os

app = Flask(__name__)
server_name = socket.gethostname()  # Unique server ID

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"server": server_name, "status": "running"})

@app.route('/request', methods=['POST'])
def handle_request():
    data = request.json
    task_type = data.get('task_type', 'addition')

    # ✅ Simple Tasks
    if task_type == 'addition':
        num1, num2 = data.get('num1', 0), data.get('num2', 0)
        result = num1 + num2

    elif task_type == 'subtraction':
        num1, num2 = data.get('num1', 0), data.get('num2', 0)
        result = num1 - num2

    elif task_type == 'string_length':
        text = data.get('text', '')
        result = len(text)

    elif task_type == 'find_vowels':
        text = data.get('text', '')
        result = [char for char in text if char.lower() in 'aeiou']

    # ✅ Complex Tasks
    elif task_type == 'multiplication':
        num1, num2 = data.get('num1', 1), data.get('num2', 1)
        result = num1 * num2

    elif task_type == 'factorial':
        num = data.get('num', 1)
        result = math.factorial(num)

    elif task_type == 'sort_large_list':
        lst = data.get('numbers', [])
        time.sleep(2)  # Simulating heavy processing
        result = sorted(lst)

    elif task_type == 'is_prime':
        num = data.get('num', 1)
        result = all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1)) and num > 1

    elif task_type == 'largest_file':
        directory = data.get('directory', '.')
        try:
            files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]
            largest = max(files, key=lambda f: os.path.getsize(os.path.join(directory, f)))
            result = largest
        except:
            result = "Error: Directory not found"

    else:
        return jsonify({"error": "Invalid task type"}), 400

    return jsonify({"server": server_name, "task": task_type, "result": result})

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)

